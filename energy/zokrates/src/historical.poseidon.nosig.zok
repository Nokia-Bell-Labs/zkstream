from "./shared" import
    MessageMetadata,
    MessageValue,
    averageLoad,
    HashPoseidon as Hash,
    SaltPoseidon as Salt,
    hashMessagePoseidon as hashMessage,
    hashOutputPoseidon as hashOutput;

// Maximum number of messages in slice.
// Slice can be padded with zero values.
const u32 N_MESSAGES = 180;

def main(
    // Actual number of (non-zero) messages
    u32 nMessages,
    // Metadata of messages
    MessageMetadata[N_MESSAGES] msgs,
    // Values of messages
    private MessageValue[N_MESSAGES] vals,
    // Salts of messages
    private Salt[N_MESSAGES] salts,
    // Salt to be used for output
    private Salt outputSalt
// value (private), hashed value (public), hashed messages (public)
) -> (u64, Hash, Hash[N_MESSAGES]) {
    // 1. Calculate hashes
    Hash[N_MESSAGES] mut hashes = [0; N_MESSAGES];
    for u32 i in 0..N_MESSAGES {
        hashes[i] = if (i < nMessages) { hashMessage(msgs[i], vals[i], salts[i]) } else { 0 };
    }
    // 2. Calculate average load
    u64 avg = averageLoad::<N_MESSAGES>(vals, nMessages);
    // 3. Hash output
    Hash avg_hashed = hashOutput(avg, outputSalt);
    return (avg, avg_hashed, hashes);
}
